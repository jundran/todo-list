(()=>{"use strict";var e={771:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(537),A=n.n(o),r=n(645),i=n.n(r)()(A());i.push([e.id,'.project-list {\n  grid-area: main-left;\n  padding-right: 16px;\n}\n.project-list .project-list-item {\n  margin-bottom: 16px;\n  background: lightblue;\n  padding: 8px 16px;\n  border-radius: 5px;\n  cursor: pointer;\n  word-break: break-word;\n  font-weight: 600;\n}\n\n.project-list-header {\n  grid-area: header-left;\n  padding-right: 16px;\n}\n\n.project-view {\n  grid-area: header-right;\n  font-size: 0.9rem;\n}\n.project-view h2 {\n  font-size: 1.5rem;\n  word-break: break-word;\n}\n.project-view .options-wrapper {\n  border-bottom: 1px dashed grey;\n  padding: 16px 0;\n}\n.project-view .options-wrapper .options {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  font-weight: 500;\n}\n.project-view .options-wrapper .rename {\n  display: none;\n  padding-top: 8px;\n  gap: 8px;\n}\n.project-view .options-wrapper .rename input {\n  width: min(100%, 375px);\n}\n.project-view li {\n  display: flex;\n}\n.project-view li button:last-of-type {\n  margin-left: 16px;\n}\n.project-view .add-object-input {\n  background: lightsteelblue;\n}\n\n.todo-list {\n  grid-area: main-right;\n}\n.todo-list li {\n  word-break: break-word;\n  padding: 8px 0;\n  cursor: pointer;\n}\n.todo-list li:not(:last-of-type) {\n  border-bottom: 1px solid grey;\n}\n.todo-list li:hover {\n  background: lightgrey;\n}\n.todo-list li .title {\n  font-weight: 600;\n  margin: 0 0 8px 0;\n}\n.todo-list li div {\n  display: grid;\n  grid-template-columns: 1fr 5fr 5fr;\n  gap: 8px;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n.todo-list li div input {\n  justify-self: start;\n}\n.todo-list li div p {\n  margin: 0;\n  justify-self: center;\n}\n.todo-list li div p:last-of-type {\n  justify-self: start;\n}\n\n.todo-detail {\n  box-sizing: border-box;\n  width: min(600px, 95%);\n  max-height: 90%;\n  overflow: auto;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 16px;\n  background: lightsteelblue;\n  border-radius: 4px;\n  box-shadow: 2px 2px 2px #272727;\n  cursor: default;\n}\n.todo-detail textarea, .todo-detail input {\n  font-family: inherit;\n  font-size: 0.9rem;\n}\n.todo-detail textarea, .todo-detail input[type=text] {\n  box-sizing: border-box;\n  width: 100%;\n  margin-bottom: 16px;\n}\n.todo-detail textarea {\n  resize: none;\n}\n.todo-detail #close {\n  position: absolute;\n  right: 0;\n  top: 0;\n  padding: 2px 8px 8px 8px;\n  font-size: 1.2rem;\n  font-weight: 600;\n  border: none;\n  background: transparent;\n}\n.todo-detail li {\n  margin-bottom: 16px;\n}\n.todo-detail li#title {\n  border-bottom: 2px solid grey;\n  margin-top: 16px;\n}\n.todo-detail li.flex {\n  display: flex;\n  gap: 8px;\n}\n.todo-detail input[type=text] {\n  padding-bottom: 16px;\n}\n.todo-detail h2 {\n  font-size: 1.2rem;\n}\n.todo-detail label, .todo-detail p {\n  margin: 0;\n  font-size: 1rem;\n}\n.todo-detail label {\n  font-weight: 600;\n}\n\n.project-list-toggle {\n  padding: 20px 8px;\n  border: none;\n  border-radius: 2px;\n  background: lightsteelblue;\n}\n.project-list-toggle .hamburger {\n  display: none;\n  position: relative;\n  margin-left: 16px;\n}\n.project-list-toggle .hamburger,\n.project-list-toggle .hamburger::before,\n.project-list-toggle .hamburger::after {\n  width: 30px;\n  height: 3px;\n  background: #fff;\n  transition: transform 300ms ease-in-out, width 200ms linear, left 200ms linear;\n}\n.project-list-toggle .hamburger::before,\n.project-list-toggle .hamburger::after {\n  content: "";\n  position: absolute;\n}\n.project-list-toggle .hamburger::before {\n  bottom: 8px;\n  left: 2px;\n  width: 26px;\n}\n.project-list-toggle .hamburger::after {\n  top: 8px;\n  left: 2px;\n  width: 26px;\n}\n\nbody.project-list-open .project-list-toggle .hamburger {\n  transform: rotate(90deg);\n}\nbody.project-list-open .project-list-toggle .hamburger::before, body.project-list-open .project-list-toggle .hamburger::after {\n  left: 0px;\n  width: 30px;\n}\n\nbody {\n  background: #dedede;\n  margin: 0;\n  font-family: sans-serif;\n}\n\nul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\nli {\n  outline-offset: -2px;\n}\n\ninput {\n  max-width: 100%;\n}\n\nbutton, input[type=checkbox] {\n  cursor: pointer;\n}\n\nbutton:disabled {\n  cursor: default;\n}\n\nheader {\n  background: lightsteelblue;\n  height: 48px;\n  display: flex;\n  align-items: center;\n}\nheader h1 {\n  margin: 0 0 0 64px;\n  color: #fff;\n}\n\n.mobile-only {\n  display: none;\n}\n\n.no-content {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n}\n\n.container {\n  max-height: calc(100vh - 48px - 16px);\n  margin: auto;\n  padding: 0 16px 16px 16px;\n  display: grid;\n  max-width: 1200px;\n  column-gap: 10%;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: max-content 1fr;\n  grid-template-areas: "header-left header-right" "main-left main-right";\n}\n.container .project-list, .container .todo-list {\n  overflow: auto;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  z-index: 1;\n}\n\nbody.modal-open .modal {\n  display: block;\n}\nbody.modal-open .container > *:not(.modal) {\n  opacity: 0.1;\n}\n\n.add-object-input {\n  margin-bottom: 16px;\n  padding: 8px 16px;\n  border-radius: 5px;\n  background: lightgreen;\n  font-weight: 600;\n}\n.add-object-input input {\n  width: calc(90% - 40px);\n}\n.add-object-input p {\n  margin-top: 0;\n}\n.add-object-input span {\n  margin-left: 8px;\n  color: #fff;\n  font-size: 2rem;\n}\n\n@media (max-width: 750px) {\n  .mobile-only {\n    display: block;\n  }\n  .project-list-toggle .hamburger {\n    display: block;\n  }\n  .container {\n    grid-template-columns: 1fr;\n    grid-template-areas: "header-right" "main-right";\n  }\n  .project-list-header, .project-list {\n    display: none;\n  }\n  body.project-list-open .container {\n    grid-template-areas: "header-left" "main-left";\n  }\n  body.project-list-open .project-list-header, body.project-list-open .project-list {\n    display: block;\n  }\n  body.project-list-open .project-view, body.project-list-open .todo-list {\n    display: none;\n  }\n}\n\n/*# sourceMappingURL=index.css.map */\n',"",{version:3,sources:["webpack://./src/styles/projectList.sass","webpack://./src/styles/index.css","webpack://./src/styles/projectListHeader.sass","webpack://./src/styles/projectView.sass","webpack://./src/styles/todoDetail.sass","webpack://./src/styles/hamburger.sass","webpack://./src/styles/index.sass"],names:[],mappings:"AAAA;EACE,oBAAA;EACA,mBAAA;ACCF;ADCE;EACE,mBAAA;EACA,qBAAA;EACA,iBAAA;EACA,kBAAA;EACA,eAAA;EACA,sBAAA;EACA,gBAAA;ACCJ;;ACZA;EACE,sBAAA;EACA,mBAAA;ADeF;;AEjBA;EACE,uBAAA;EACA,iBAAA;AFoBF;AEnBE;EACE,iBAAA;EACA,sBAAA;AFqBJ;AEpBE;EACE,8BAAA;EACA,eAAA;AFsBJ;AErBI;EACE,aAAA;EACA,eAAA;EACA,SAAA;EACA,gBAAA;AFuBN;AEtBI;EACE,aAAA;EACA,gBAAA;EACA,QAAA;AFwBN;AEvBM;EACE,uBAAA;AFyBR;AExBE;EACE,aAAA;AF0BJ;AEzBI;EACE,iBAAA;AF2BN;AEzBE;EACE,0BAAA;AF2BJ;;AEzBA;EACE,qBAAA;AF4BF;AE3BE;EACE,sBAAA;EACA,cAAA;EACA,eAAA;AF6BJ;AE5BI;EACE,6BAAA;AF8BN;AE7BI;EACE,qBAAA;AF+BN;AE9BI;EACE,gBAAA;EACA,iBAAA;AFgCN;AE/BI;EACE,aAAA;EACA,kCAAA;EACA,QAAA;EACA,iBAAA;EACA,gBAAA;AFiCN;AEhCM;EACE,mBAAA;AFkCR;AEjCM;EACE,SAAA;EACA,oBAAA;AFmCR;AElCQ;EACE,mBAAA;AFoCV;;AGzFA;EACE,sBAAA;EACA,sBAAA;EACA,eAAA;EACA,cAAA;EACA,eAAA;EACA,QAAA;EACA,SAAA;EACA,gCAAA;EACA,aAAA;EACA,0BAAA;EACA,kBAAA;EACA,+BAAA;EACA,eAAA;AH4FF;AG3FE;EACE,oBAAA;EACA,iBAAA;AH6FJ;AG5FE;EACE,sBAAA;EACA,WAAA;EACA,mBAAA;AH8FJ;AG7FE;EACE,YAAA;AH+FJ;AG9FE;EACE,kBAAA;EACA,QAAA;EACA,MAAA;EACA,wBAAA;EACA,iBAAA;EACA,gBAAA;EACA,YAAA;EACA,uBAAA;AHgGJ;AG/FE;EACE,mBAAA;AHiGJ;AGhGI;EACE,6BAAA;EACA,gBAAA;AHkGN;AGjGI;EACE,aAAA;EACA,QAAA;AHmGN;AGlGE;EACE,oBAAA;AHoGJ;AGnGE;EACE,iBAAA;AHqGJ;AGpGE;EACE,SAAA;EACA,eAAA;AHsGJ;AGrGE;EACE,gBAAA;AHuGJ;;AIvJA;EACE,iBAAA;EACA,YAAA;EACA,kBAAA;EACA,0BAAA;AJ0JF;AIxJE;EACE,aAAA;EACA,kBAAA;EACA,iBAAA;AJ0JJ;AIxJE;;;EAGE,WAAA;EACA,WAAA;EACA,gBAAA;EAIA,8EAAA;AJuJJ;AIrJE;;EAEE,WAAA;EACA,kBAAA;AJuJJ;AIrJE;EACE,WAAA;EACA,SAAA;EACA,WAAA;AJuJJ;AItJE;EACE,QAAA;EACA,SAAA;EACA,WAAA;AJwJJ;;AIrJE;EACE,wBAAA;AJwJJ;AIvJI;EACE,SAAA;EACA,WAAA;AJyJN;;AK5LA;EACE,mBAAA;EACA,SAAA;EACA,uBAAA;AL+LF;;AK7LA;EACE,gBAAA;EACA,UAAA;EACA,SAAA;ALgMF;;AK9LA;EACE,oBAAA;ALiMF;;AK/LA;EACE,eAAA;ALkMF;;AKhMA;EACE,eAAA;ALmMF;;AKjMA;EACE,eAAA;ALoMF;;AKlMA;EACE,0BAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;ALqMF;AKpME;EACE,kBAAA;EACA,WAAA;ALsMJ;;AKpMA;EACE,aAAA;ALuMF;;AKrMA;EACE,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;ALwMF;;AKtMA;EACE,qCAAA;EACA,YAAA;EACA,yBAAA;EACA,aAAA;EACA,iBAAA;EACA,eAAA;EACA,gCAAA;EACA,mCAAA;EACA,sEAAA;ALyMF;AKvME;EACE,cAAA;ALyMJ;;AKvMA;EACE,aAAA;EACA,eAAA;EACA,OAAA;EACA,MAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,UAAA;AL0MF;;AKvME;EACE,cAAA;AL0MJ;AKzME;EACE,YAAA;AL2MJ;;AKzMA;EACE,mBAAA;EACA,iBAAA;EACA,kBAAA;EACA,sBAAA;EACA,gBAAA;AL4MF;AK3ME;EACE,uBAAA;AL6MJ;AK5ME;EACE,aAAA;AL8MJ;AK7ME;EACE,gBAAA;EACA,WAAA;EACA,eAAA;AL+MJ;;AK7MA;EACE;IACE,cAAA;ELgNF;EK9MA;IACE,cAAA;ELgNF;EK/MA;IACE,0BAAA;IACA,gDAAA;ELiNF;EKhNA;IACE,aAAA;ELkNF;EK/ME;IACE,8CAAA;ELiNJ;EKhNE;IACE,cAAA;ELkNJ;EKjNE;IACE,aAAA;ELmNJ;AACF;;AAEA,oCAAoC",sourceRoot:""}]);const a=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,A,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);o&&i[s[0]]||(void 0!==r&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=r),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),A&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=A):s[4]="".concat(A)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(A," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},i=[],a=0;a<e.length;a++){var l=e[a],c=o.base?l[0]+o.base:l[0],s=r[c]||0,d="".concat(c," ").concat(s);r[c]=s+1;var p=n(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var E=A(u,o);o.byIndex=a,t.splice(a,0,{identifier:d,updater:E,references:1})}i.push(d)}return i}function A(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,A){var r=o(e=e||[],A=A||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var a=n(r[i]);t[a].references--}for(var l=o(e,A),c=0;c<r.length;c++){var s=n(r[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}r=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var A=void 0!==n.layer;A&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,A&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var A=t[o];if(void 0!==A)return A.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{function e(){const e=new Date;return`${e.getFullYear()+1}-${e.getMonth()+1}-${e.getDate()}`}n.d(o,{C:()=>T});const t=[{title:"Make a todo app",desc:"Write some nice looking code",due:e(),priority:"High",completed:!0},{title:"Get a job writing code",due:e()},{title:"Live happily ever after",due:e(),priority:"Low"}];function A(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e){A(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===r(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function l(e){A(1,arguments);var t=i(e);return t.setHours(0,0,0,0),t}var c=864e5;function s(e,t){A(2,arguments);var n=l(e),o=l(t),r=n.getTime()-a(n),i=o.getTime()-a(o);return Math.round((r-i)/c)}function d(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}function p(e,t="",n="Not set",o="Normal",r=!1){function a(e){e.setHours(0),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0)}return{get title(){return e},get desc(){return t},get due(){return n},get priority(){return o},get completed(){return r},set title(t){e=t,this.project.addOrUpdateProjectInLocalStorage()},set desc(e){t=e,this.project.addOrUpdateProjectInLocalStorage()},set due(e){n=e||"Not set",this.project.addOrUpdateProjectInLocalStorage()},set priority(e){o=e,this.project.addOrUpdateProjectInLocalStorage()},set completed(e){r=e,this.project.addOrUpdateProjectInLocalStorage()},getDueFormatted(){return function(e){if("Not set"===n)return n;const[t,o,r]=e.split("-"),l=new Date;l.setFullYear(t),l.setMonth(o-1),l.setDate(r),a(l);const c=new Date;a(c);const p=function(e,t){A(2,arguments);var n=i(e),o=i(t),r=d(n,o),a=Math.abs(s(n,o));n.setDate(n.getDate()-r*a);var l=r*(a-Number(d(n,o)===-r));return 0===l?0:l}(l,c);let u=`(${p} ${1===p?"day":"days"})`;return p<0?u="(Overdue)":0===p&&(u="(Today)"),`${l.toDateString()} ${u}`}(this.due)}}}function u(e=""){const t=[];function n(n=e,o="Project"){const A="Project"===o?E:t;return""===n?Error(`${o} must have a name.`):A.some((e=>e.title.toLowerCase()===n.toLowerCase()))?Error(`A ${o} with this name already exists.`):null}function o(t){const o=n(t=t.trim());if(o)return o;localStorage.removeItem(e),e=t,r()}function A(){return{title:`${e}`,todos:t.map((e=>Object.values(e).slice(0,5)))}}function r(){localStorage.setItem("--todo-project--"+e,JSON.stringify(A()))}return n(e=e.trim())||(r(),{get title(){return e},set title(e){o(e)},get todos(){return t},rename:o,addTodo:function(e,...o){const A=n(e=e.trim(),"Todo");if(A)return A;const i=p(e,...o),a=t.push(i);return i.id=a-1,i.project=this,r(),i},removeTodo:function(e){t.splice(e.id,1),t.forEach(((e,t)=>e.id=t)),r()},getProjectData:A,addOrUpdateProjectInLocalStorage:r})}const E=[];async function m(e,t=!0){E.push(e),t&&E.sort(((e,t)=>e.title>t.title))}function g(){!function(){const e=u("General");m(e),t.forEach((t=>{e.addTodo(t.title,t.desc,t.due,t.priority,t.completed)}))}(),localStorage.setItem("--todo-app--return-visitor",!0)}function f(){document.body.classList.remove("modal-open")}function b(e){const t=document.createElement("div");return t.className="todo-detail",t.innerHTML=`\n    <button id='close' aria-label for="desc"='close'>X</button>\n    <ul>\n      <li id='title'>\n        <h2 aria-label='todo name'>${e.title}</h2>\n      </li>\n      <li id='desc'>\n        <label for="desc">Description</label for="desc">\n        <p id="desc">${e.desc?e.desc:"[No description added]"}</p>\n      </li>\n      <li id="due" class='flex'>\n        <label for="due">Due: </label for="desc">\n        <span>${e.getDueFormatted()}</span>\n      </li>\n      <li id="priority" class='flex'>\n        <label for="priority">Priority: </label for="desc"> \n        <span>${e.priority}</span>\n      </li>\n      <li id='completed' class='flex'>\n        <label for="completed">Status: </label for="desc">\n        <span>${e.completed?"Completed":"In progress"}</span>\n      </li>\n    </ul>\n    <button id='edit'>Edit</button>\n  `,t.querySelector("#close").onclick=()=>f(),t.querySelector("#edit").onclick=()=>function(e,t){e.innerHTML=`\n    <button id='close' aria-label for="desc"='close'>X</button>\n    <form>\n      <ul>\n        <li id='title'>\n          <label for="title">Title</label>\n          <input aria-label='todo title' name='title' type="text" value="${t.title}">\n        </li>\n        <li id='desc'>\n          <label for="desc">Description</label">\n          <textarea name='desc' rows="10">${t.desc}</textarea>\n        </li>\n        <li id="due" class='flex'>\n          <label for="due">Due: </label>\n          <input name="due" type="date" value="${t.due}">\n        </li>\n        <li id="priority" class='flex'>\n          <label for="priority">Priority: </label>\n          <select name="priority"></select>\n        </li>\n        <li id='completed' class='flex'>\n          <label for="completed">Completed: </label>\n          <input name="completed" ${t.completed?'type="checkbox" checked':'type="checkbox"'}>\n        </li>\n      </ul>\n      <button type='button' id='delete'>Delete</button>\n      <button type='button' id='cancel'>Cancel</button>\n      <button type='submit' id='save'>Save</button>\n    </form>\n  `,["High","Normal","Low"].forEach((n=>{e.querySelector("ul select").append(new Option(n,n,"Normal"===n,t.priority===n))})),e.querySelector("#close").onclick=f,e.querySelector("#delete").onclick=()=>function(e){e.project.removeTodo(e),T(y(e.project)),document.body.classList.remove("modal-open")}(t),e.querySelector("#cancel").onclick=()=>function(e){document.querySelector(".modal").replaceChildren(b(e))}(t),e.querySelector("form").onsubmit=e=>function(e,t){e.preventDefault(),Object.keys(t).slice(0,5).forEach((n=>{t[n]="completed"!==n?e.target[n].value:e.target[n].checked})),T(y(t.project)),document.querySelector(".modal").replaceChildren(b(t))}(e,t)}(t,e),t}localStorage.length?(Object.keys(localStorage).filter((e=>e.startsWith("--todo-project--"))).forEach((e=>{const t=JSON.parse(localStorage.getItem(e));m(u(t.title),!1),t.todos.forEach((e=>E[E.length-1].addTodo(...e)))})),E.sort(((e,t)=>e.title>t.title)),E.length||localStorage.getItem("--todo-app--return-visitor")||g()):g();const C={ongoing:!0,completed:!0};function y(e){const t=document.createElement("section");return t.className="project-view",e?(t.innerHTML=`\n      <h2>${e.title}</h2>\n      <div class="add-object-input">\n        <p>Add Todo <span>+</span></p>\n        <form id="add-todo-form">\n          <input tabindex=0 name="title" aria-label="todo title" maxlength=50>\n          <button>Add</button>\n        </form>\n      </div>\n      <div class="options-wrapper">\n        <form id="filter-form">\n          <ul class=options>\n            <li>\n              <label for="ongoing">Ongoing</label>\n              <input\n                id="ongoing" name="ongoing"\n                ${C.ongoing?'type="checkbox" checked':'type="checkbox"'}\n              >\n            </li>\n            <li>\n              <label for="completed">Completed</label>\n              <input\n                id="completed" name="completed"\n                ${C.completed?'type="checkbox" checked':'type="checkbox"'}\n              >\n            </li>\n            <li>\n              <button class="rename-button" type=button>Rename Project</button>\n              <button class="delete-button" type=button>Delete Project</button>\n            </li>\n          </ul>\n        </form>\n        <form class="rename">\n          <input name="newName">\n          <button>Submit</button>\n        </form>\n      </div>\n    `,C.ongoing&&(t.querySelector("#ongoing").checked=!0),C.completed&&(t.querySelector("#completed").checked=!0),t.querySelector(".rename-button").onclick=function(){const e=t.querySelector(".rename");e.style.display="flex"===e.style.display?"none":"flex"},t.querySelector(".rename").onsubmit=function(n){n.preventDefault(),t.querySelector(".rename").style.display="none",e.title=n.target.newName.value,T(y(e)),T(h())},t.querySelector(".delete-button").onclick=function(){(function(e){localStorage.removeItem(e.title),E.splice(E.findIndex((t=>t.title===e.title)),1)})(e),T(y(null)),T(h())},t.querySelector("#filter-form").onchange=function(e){C.ongoing=e.currentTarget.ongoing.checked,C.completed=e.currentTarget.completed.checked,n()},t.querySelector("#add-todo-form").onsubmit=function(t){t.preventDefault();const o=e.addTodo(t.target.title.value);if(o instanceof Error)return console.log(o);n()}):(t.innerHTML="\n      <div class='no-content'>\n        <div>\n          <p>No project is selected</p>\n          <button class='mobile-only'>Project List</button>\n        </div>\n      </div>\n    ",t.querySelector("button").onclick=()=>{document.body.classList.add("project-list-open")}),n(),t;function n(){const t=document.createElement("section");if(t.className="todo-list",!e)return T(t);if(e.todos.length){const o=document.createElement("ul");t.append(o);const A=e.todos.filter((e=>!(!C.completed||!e.completed)||!(!C.ongoing||!1!==e.completed)||void 0));o.innerHTML="",A.forEach((e=>o.append(function(e){const t=document.createElement("li");t.tabIndex=0,t.addEventListener("keydown",(e=>{["Enter"," "].includes(e.key)&&document.activeElement.click()})),t.innerHTML=`\n      <p class="title">${e.title}</p>\n      <div>\n        <input\n          name="completed"\n          ${e.completed?'type="checkbox" checked':'type="checkbox"'}\n        >\n        <p class="due">Due: ${e.getDueFormatted()}</p>\n        <p class=priority>Priority: <span>${e.priority}</span></p>\n      </div>\n    `;const o=t.querySelector(".due");return o.textContent.includes("Overdue")&&(o.style.color="red"),function(e,t){e.querySelector(".priority span").style.color="High"===t?"red":"Normal"===t?"green":"grey"}(t,e.priority),t.addEventListener("click",(function(t){if("INPUT"===t.target.tagName)return e.completed=t.target.checked,n();document.body.classList.add("modal-open"),document.querySelector(".modal").replaceChildren(b(e))})),t}(e))))}else t.innerHTML='\n        <div>\n          <div style="font-size: 1.5rem">\n            <p>Project does not have any todos</p>\n          </div>\n        </div>\n      ';T(t)}}function h(){const e=document.createElement("section");e.className="project-list";const t=document.createElement("ul");return E.forEach((e=>{const n=document.createElement("li");n.append(e.title),n.className="project-list-item",n.onclick=()=>function(e){document.body.classList.remove("project-list-open"),T(y(e))}(e),n.tabIndex=0,n.addEventListener("keydown",(e=>{["Enter"," "].includes(e.key)&&document.activeElement.click()})),t.append(n)})),e.append(t),e}var v=n(379),x=n.n(v),j=n(795),B=n.n(j),w=n(569),k=n.n(w),S=n(565),M=n.n(S),L=n(216),F=n.n(L),J=n(589),I=n.n(J),N=n(771),D={};function T(e){const t=document.querySelector(".container"),n=t.getElementsByClassName(e.classList[0])[0];n?n.replaceWith(e):t.append(e)}D.styleTagTransform=I(),D.setAttributes=M(),D.insert=k().bind(null,"head"),D.domAPI=B(),D.insertStyleElement=F(),x()(N.Z,D),N.Z&&N.Z.locals&&N.Z.locals,window.onclick=e=>{e.target===document.querySelector(".modal")&&document.body.classList.remove("modal-open")},document.querySelector(".project-list-toggle").addEventListener("click",(()=>document.body.classList.toggle("project-list-open")));const q=document.querySelector(".container");q.querySelector("#add-project-form").onsubmit=function(e){e.preventDefault();const t=u(e.target.title.value);if(t instanceof Error)return console.log(t);m(t),T(h())},q.append(h()),q.append(y(E.length&&E[0]||null)),document.body.classList.toggle("project-list-open")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,